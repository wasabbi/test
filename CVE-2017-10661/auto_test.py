#NOTICE: target cve should be runable by "chmod -R 777" etc 

# sudo apt-get install openssh-server
# sudo service ssh status

import os
import glob
import re
from pwn import *

tid1 = 1124
tid2 = 1125

__start_routine1 = 0x40083d
__start_routine2 = 0x4008b1

sched1 = 1
sched2 = 2

cve_path = "./CVE-2017-10661"

local_username = "ziiiro"
local_password = "11111"

guest_username = "ubuntu"
guest_password = "123"
ssh_port = 5555
qemu_run = """~/ruixie/qemu_dynamic_analysis/build/x86_64-softmmu/qemu-system-x86_64   -kernel ~/ruixie/bzImage-4.10.1   -append "console=ttyS0 root=/dev/sda debug earlyprintk=serial slub_debug=QUZ nokaslr"  -hda ~/ruixie/xenial-server-cloudimg-amd64.img   -net nic -net user,hostfwd=tcp::5555-:22   -enable-kvm   -m 4G   -smp 4 -nographic"""

try_threshold = 4






#=============================================================
def analyze(output):
    # Collect Info (cpu_index, qemu_tid, cr3) 
    with open("output.txt", 'w') as f:
        f.write(output)
    f.close()
    m = re.findall("\#\[QEMU\]\[(\d+)\] HYPERCALL_INSERT_BP:\n#\[QEMU\]reached bp [0-9a-f]+: cpu: (\d+) cr3: ([0-9a-f]+)\n.+\n.+\n.+hw_bp_addr: ([0-9a-f]+)", output)
    lines = output.split("\n")
    flags = []
    try:
        for i in range(2):
            if(m[i][1] == '0'):
                qemu_tid1 = int(m[i][0])
                hw_addr1 = int(m[i][3], 16)
                cr3 = int(m[i][2] ,16)
            else:
                qemu_tid2 = int(m[i][0])
                hw_addr2 = int(m[i][3], 16)
    except:
        print("IndexError: list index out of range")
        print("m: ", m)
        print("retry...")
        flags.append("retry")
        return "", flags
    else:
        pass
    # Analyze
    func_start1 = 0
    func_start2 = 0
    func_end1 = 0
    func_end2 = 0
    target1 = 0
    target2 = 0
    resume1 = 0
    resume2 = 0
    schedule_end = 0
    isInBound1 = False
    isInBound2 = False


    #resumeInBound1 = False
    #resumeInBound2 = False
    for i in range(len(lines)):
        if(re.search("\[%d\]======__start_routine started======" % (qemu_tid1), lines[i])):
            func_start1 = i
        elif(re.search("\[%d\]======__start_routine started======" % (qemu_tid2), lines[i])):
            func_start2 = i
        elif(re.search("\[%d\]======__start_routine ended======" % (qemu_tid1), lines[i])):
            func_end1 = i
        elif(re.search("\[%d\]======__start_routine ended======" % (qemu_tid2), lines[i])):
            func_end2 = i
        elif(re.search("\[%d\] TARGET:" % (qemu_tid1), lines[i])):
            target1 = i
        elif(re.search("\[%d\] TARGET:" % (qemu_tid2), lines[i])):
            target2 = i
        elif(re.search("\[%d\]\[CPU\d\] .+ resume" % (qemu_tid1), lines[i])):
            resume1 = i
        elif(re.search("\[%d\]\[CPU\d\] .+ resume" % (qemu_tid2), lines[i])):
            resume2 = i
        #elif(re.search("rip: \?\?\?\?\?\?\?\?", lines[i])):
        #    retry = True
        elif(re.search("Thread Scheduling Ended", lines[i])):
            m = re.findall("\#\[QEMU\]\[(\d+)\] CPU", lines[i-2])
            if(int(m[0]) == qemu_tid1):
                waited_tid = 1
            else:
                waited_tid = 2
            schedule_end = i

    if(target1 != 0):
        isInBound1 = (func_start1 < target1 and (target1 < func_end1 or func_end1 == 0))
    if(target2 != 0):
        isInBound2 = (func_start2 < target2 and (target2 < func_end2 or func_end2 == 0))
    

    #   Show test result
    report = "\nTARGET INST1:\n"
    report += "ADDR: %s\n" % (hex(hw_addr1),)
    if(target1 != 0):
        report += "TRIGGERED: YES\n"
    else:
        report += "TRIGGERED: NO\n"
    if(isInBound1):
        report += "INBOUND: YES\n"
    else:
        report += "INBOUND: NO\n"

    report += "\nTARGET INST2:\n"
    report += "ADDR: %s\n" % (hex(hw_addr2),)
    if(target2 != 0):
        report += "TRIGGERED: YES\n"
    else:
        report += "TRIGGERED: NO\n"
    if(isInBound2):
        report += "INBOUND: YES\n"
    else:
        report += "INBOUND: NO\n"

    if(resume1 != 0 and resume2 != 0):
        report += "\nCONCURRENCY: YES\n"
    else:
        report += "\nCONCURRENCY: NO\n"

    #Some Flags
    if((func_end1 == 0 or func_end2 == 0) and (resume1 == 0 and resume2 == 0)):   # test has stopped (why rip: ?????)
        flags.append("retry")
        report += "retry..\n"

    #if((target1 != 0 and not isInBound1) or (target1 == 0 and func_end1 != 0)):    # 1.bp triggered but out of bound 2.bp not triggered, func_end successfully
    #    report += "remove inst1\n"
    #    flags.append("remove inst1")

    #if((target2 != 0 and not isInBound2) or (target2 == 0 and func_end2 != 0)):    # 1.bp triggered but out of bound 2.bp not triggered, func_end successfully
    #    report += "remove inst2\n"
    #    flags.append("remove inst2")
    
    if(flags != []):
        return report, flags

    report += "\nConclusion:\n"
    #   Conclude: race or not
    # Race (Trigger 2 bps and is target)
    if(isInBound1 and isInBound2):
        if(func_start1 < resume1 and (resume1 < func_end1 or func_end1 == 0) and func_start2 < resume2 and (resume2 < func_end2 or func_end2 == 0)):
            report += "inst1 and inst2 RACE in bound\n" # func_end1 == 0: crash in __start_routine1
        else:
            report += "WHAT SITUATION1??\n"
        return report, []
    
    # Trigger 2 bps but not target
    if(target1 != 0 and target2 != 0):
        report += "inst1 and inst2 race but out of bound\nthey could be in thread/process context switching\n"
        return report, []
        
    # Trigger none bps
    if(target1 == 0 and target2 == 0):
        report += "\n"
        return report, []
    
    # Trigger 1 bps
    if(schedule_end == 0):
        report += "not concurrent. when one thread sleeping, the other thread exited\n"
        return report, []

    if(target1 != 0):
        if(waited_tid == 1):
            if(func_end1 < schedule_end):   # triggered bp is out of bound
                report += "target inst1 is out of bound\nand there is no target inst2\n"
            else:       #triggered bp is in bound
                report += "target inst1 is in bound\nand there is no target inst2\n"
        else:
            report += "WHAT SITUATION2??\n"
    if(target2 != 0):
        if(waited_tid == 2):
            if(func_end2 < schedule_end):   # triggered bp is out of bound
                report += "target inst2 is out of bound\nand there is no target inst1\n"
            else:       #triggered bp is in bound
                report += "target inst2 is in bound\nand there is no target inst1\n"
        else:
            report += "WHAT SITUATION3??\n"
    return  report, []











#   PHASE 1: Create testcase
#   PHASE 1.1: Create testcase
print("[PHASE 1.1: Create testcase]")
data = ''
with open('generate_test.py', 'r') as f:
    for line in f.readlines():
        if(line.find('cve_path = ') == 0):
            line = 'cve_path = \"%s\"' % (cve_path,) + '\n'

        if(line.find('__start_routine1 = ') == 0):
            line = '__start_routine1 = %s' % (hex(__start_routine1),) + '\n'
        if(line.find('__start_routine2 = ') == 0):
            line = '__start_routine2 = %s' % (hex(__start_routine2),) + '\n'

        if(line.find('sched1 = ') == 0):
            line = 'sched1 = %d' % (sched1,) + '\n'
        if(line.find('sched2 = ') == 0):
            line = 'sched2 = %d' % (sched2,) + '\n'

        if(line.find('tid1 = ') == 0):
            line = 'tid1 = %d' % (tid1) + '\n'
        if(line.find('tid2 = ') == 0):
            line = 'tid2 = %d' % (tid2) + '\n'
        data += line
f.close()
with open('generate_test.py', 'w') as f:
    f.writelines(data)
f.close()
os.system("python generate_test.py")

#   PHASE 1.2: Push & Pull
print("[PHASE 1.2: Push & Pull]")
os.chdir("testcase")
os.system("./gitpush.sh")
os.chdir("..")
qemu_ssh = ssh(local_username, "localhost", password=local_password)
qemu_sh = qemu_ssh.run(qemu_run)
qemu_sh.recvuntil("ubuntu login: ")[-15:]
guest_ssh = ssh(guest_username, "localhost", port=ssh_port, password=guest_password)
guest_sh = guest_ssh.shell("/bin/sh")
guest_sh.recv()
guest_sh.sendline("pwd")
guest_sh.recv()
guest_sh.sendline("./gitclone.sh")
guest_sh.recvuntil("Checking connectivity... done.")
guest_sh.sendline("sudo shutdown now")
print("Shutdown...")
sleep(5)
guest_sh.close()
guest_ssh.close()
qemu_sh.close()
qemu_ssh.close()

#   PHASE 2: Test
print("[PHASE 2: Test]")
testcases = glob.glob("./testcase/test_*")
#testcases = ["test_46_1.py", "test_46_2.py", "test_46_3.py"]
temp_list = []
for i in testcases:
    temp_list.append(i.replace("./testcase/",""))
testcases = sorted(temp_list)
finished_list = []
for i in glob.glob("./report/test_*"):
    finished_list.append(i.replace("./report/","").replace(".txt",".py"))
for i in finished_list:
    testcases.remove(i)

print("testcases: ",testcases)

progress = 0.0
#   PHASE 2.1: Run qemu 
qemu_ssh = ssh(local_username, "localhost", password=local_password)
qemu_sh = qemu_ssh.run(qemu_run)
print(qemu_sh.recvuntil("ubuntu login: ")[-15:])

retry_flag = False
for testcase in testcases:
    m = re.findall("test_(\d+)_(\d+)",testcase)
    addr_index = m[0][0]
    race_pair_index = m[0][1]
    for i in range(try_threshold):
        try:
            #   PHASE 2.2:  Test one by one
            guest_ssh = ssh(guest_username, "localhost", port=ssh_port, password=guest_password)
            guest_sh = guest_ssh.shell("/bin/sh")
            guest_sh.recv()
            guest_sh.sendline("sudo su")
            guest_sh.sendline("cd testcase")
            guest_sh.sendline("pwd")
            print(guest_sh.recv())
        except :
            try:
                print("Raised Eoferror sleep 1secs")
                sleep(1)
                #   PHASE 2.1: Rerun Qemu
                qemu_sh.close()
                qemu_sh = qemu_ssh.run(qemu_run)
                print(qemu_sh.recvuntil("ubuntu login: ")[-15:])

                guest_ssh = ssh(guest_username, "localhost", port=ssh_port, password=guest_password)
                guest_sh = guest_ssh.shell("/bin/sh")
                guest_sh.recv()
                guest_sh.sendline("sudo su")
                guest_sh.sendline("cd testcase")
                guest_sh.sendline("pwd")
                print(guest_sh.recv())
            except:
                try:
                    print("Raised Eoferror in try_except sleep 1secs")
                    sleep(1)
                    #   PHASE 2.1: Rerun Qemu
                    qemu_sh = qemu_ssh.run(qemu_run)
                    print(qemu_sh.recvuntil("ubuntu login: ")[-15:])

                    guest_ssh = ssh(guest_username, "localhost", port=ssh_port, password=guest_password)
                    guest_sh = guest_ssh.shell("/bin/sh")
                    guest_sh.recv()
                    guest_sh.sendline("sudo su")
                    guest_sh.sendline("cd testcase")
                    guest_sh.sendline("pwd")
                    print(guest_sh.recv())
                except:
                    print("Raised Eoferror sleep 1secs")
                    sleep(1)
                    #   PHASE 2.1: Rerun Qemu
                    qemu_sh.close()
                    qemu_sh = qemu_ssh.run(qemu_run)
                    print(qemu_sh.recvuntil("ubuntu login: ")[-15:])

                    guest_ssh = ssh(guest_username, "localhost", port=ssh_port, password=guest_password)
                    guest_sh = guest_ssh.shell("/bin/sh")
                    guest_sh.recv()
                    guest_sh.sendline("sudo su")
                    guest_sh.sendline("cd testcase")
                    guest_sh.sendline("pwd")
                    print(guest_sh.recv())
                else:
                    pass
            else:
                pass
        else:
            pass

        print("python %s" % (testcase))
        test_sh = guest_sh.sendline("python %s" % testcase)
        buffer = "not_empty"
        output = ''
        while(buffer != ''):
            try:
                buffer = qemu_sh.recvline(timeout=3).replace("\n","")
            except:
                #qemu_sh has closed
                print("qemu_sh has closed (maybe Segmentation fault)\nretry...")
                qemu_sh = qemu_ssh.run(qemu_run)
                print(qemu_sh.recvuntil("ubuntu login: ")[-15:])

                guest_ssh = ssh(guest_username, "localhost", port=ssh_port, password=guest_password)
                guest_sh = guest_ssh.shell("/bin/sh")
                guest_sh.recv()
                guest_sh.sendline("sudo su")
                guest_sh.sendline("cd testcase")
                guest_sh.sendline("pwd")
                print(guest_sh.recv())
                retry_flag = True
            else:
                pass
            output += buffer.replace("\r","")+"\n"
            print(buffer)


        report, flags = analyze(output)

        if("retry" in flags):
            retry_flag = True

        print("\n"+report)
        
        report += "\n\n" + "*"*15 + "\n" + output
        with open('./report/%s' % (testcase.replace("py","txt")), 'w') as f:
            f.writelines(report)
        f.close()


        if(not retry_flag):
            break

        print("Retry...")
        retry_flag = False
        guest_sh.close()
        guest_ssh.close()

    print("%s end" % testcase)
    progress += 1
    print("progress: %2.1f %%" % (100 * progress/len(testcases)))
    print("*******************************")
    guest_sh.close()
    guest_ssh.close()


qemu_sh.close()
qemu_ssh.close()
#   PHASE 3:  Result







